#ifndef SIGMADSP_PARAMETERS_H
#define SIGMADSP_PARAMETERS_H

#include <SigmaDSP.h>

/****************************************************************************
| File name: SigmaDSP_parameters.h                                          |
| Generation tool: Powershell                                               |
| Date and time: 30.10.2022 11.19.08                                        |
|                                                                           |
| ADAU1701 parameter and program file header                                |
| SigmaDSP library and its content is developed and maintained by MCUdude.  |
| https://github.com/MCUdude/SigmaDSP                                       |
|                                                                           |
| Huge thanks to the Aida DSP team who have reverse engineered a lot of the |
| Sigma DSP algorithms and made them open source and available to everyone. |
| This library would never have existed if it weren't for the Aida DSP team |
| and their incredible work.                                                |
|                                                                           |
| This file have been generated with the Sigmastudio_project_formatter.sh   |
| script. This file contains all the DSP function block parameters and      |
| addresses. It also contains the program that will be loaded to the        |
| external EEPROM.                                                          |
|                                                                           |
| The *_COUNT macro holds the number of addresses in memory each complete   |
| module takes.                                                             |
|                                                                           |
| The *_ADDR macro holds the current address for the module. Use this macro |
| when changing the behaviour of the modules (EQs, volume etc.).            |
|                                                                           |
| The *_FIXFT macros holds the default value of the module. Use this when   |
| restoring the default parameters.                                         |
|                                                                           |
| The DSP_eeprom_firmware[] array contains the DSP firmware, and can be     |
| loaded using the writeFirmware method in the DSPEEPROM class.             |
| When stored in the external i2c EEPROM, the firmware is automatically     |
| loaded into the DSP on boot if the SELFBOOT pin is tied to Vcc.           |
|                                                                           |
| If you want to load the DSP firmware directly without using an external   |
| EEPROM, you can simply run loadProgram() (located at the bottom of this   |
| file) where you pass the SigmaDSP object as the only parameter.           |
|                                                                           |
****************************************************************************/

/* 7-bit i2c addresses */
#define DSP_I2C_ADDRESS (0x70 >> 1) & 0xFE


// Define readout macro as empty
#define SIGMASTUDIOTYPE_SPECIAL(x) (x)

/* Module SafeLoadModule - SafeLoadModule*/
#define MOD_SAFELOADMODULE_COUNT                       10
#define MOD_SAFELOADMODULE_DATA_SAFELOAD0_ADDR         24576
#define MOD_SAFELOADMODULE_DATA_SAFELOAD1_ADDR         24577
#define MOD_SAFELOADMODULE_DATA_SAFELOAD2_ADDR         24578
#define MOD_SAFELOADMODULE_DATA_SAFELOAD3_ADDR         24579
#define MOD_SAFELOADMODULE_DATA_SAFELOAD4_ADDR         24580
#define MOD_SAFELOADMODULE_ADDRESS_SAFELOAD_ADDR       24581
#define MOD_SAFELOADMODULE_NUM_SAFELOAD_ADDR           24582




/* DSP Ram Data */
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, };

/* DSP Program Data */
#define PROGRAM_SIZE 332 

#define PROGRAM_ADDR 49152 
#define PROGRAM_REGSIZE 5 
const uint8_t PROGMEM DSP_program_data[PROGRAM_SIZE] = 
{0x00, 0x00, 0x00, 0x02, 0x0C, 0x00, 0xDC, 0xDC, 0x0D, 0x00, 0xFF, 0xD2, 0x0D, 0x00, 0xFF, 0xD0, 0x0D, 0x00, 0xF4, 0x50, 0x0D, 0x00, 0xF4, 0x00, 0xC0, 0x00, 0x23, 0x80, 0x80, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x23, 0x00, 0x80, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x23, 0xC0, 0x80, 0x00, 0x00, 0x10, 0xC0, 0x00, 0x22, 0x00, 0x80, 0x00, 0x00, 0x00, 0x08, 0x80, 0xDC, 0xE0, 0x0C, 0x00, 0xDC, 0xDC, 0x0A, 0x21, 0x00, 0x12, 0x08, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00, 0x14, 0x06, 0x40, 0x50, 0x10, 0xC0, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x27, 0x0D, 0x00, 0xFF, 0xC1, 0xC0, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x01, 0x0D, 0x00, 0xF4, 0x62, 0xC0, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x00, 0x0D, 0x00, 0xF4, 0x62, 0xC0, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x0D, 0x00, 0xFF, 0xD1, 0x00, 0x00, 0x00, 0x03, 0x0D, 0x00, 0xFF, 0xD2, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x9E, 0xDC, 0xE0, 0x08, 0x9C, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x82, 0x4F, 0x00, 0x00, 0x08, 0x8A, 0xDC, 0xE0, 0x0A, 0x23, 0x00, 0x06, 0x00, 0x8C, 0x20, 0x00, 0x0A, 0xA7, 0x00, 0x05, 0x02, 0x09, 0x00, 0x3E, 0xC0, 0x00, 0x28, 0x70, 0x80, 0x00, 0x60, 0x00, 0x00, 0x8C, 0x11, 0x91, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0xBC, 0xE9, 0x00, 0x00, 0xC2, 0xF1, 0x01, 0x00, 0x00, 0x3D, 0x06, 0x00, 0x50, 0x14, 0x36, 0x40, 0x50, 0x15, 0x26, 0x40, 0x40, 0x15, 0x09, 0x2B, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0xFC, 0x40, 0x06, 0x40, 0x10, 0x0E, 0x0C, 0x00, 0xFC, 0x41, 0x06, 0x40, 0x10, 0x1E, 0x06, 0x00, 0x10, 0x0E, 0x0D, 0x00, 0xFC, 0xC0, 0x06, 0x00, 0x10, 0x1E, 0x0D, 0x00, 0xFC, 0xC1, 0x08, 0x9C, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x09, 0x9C, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x0C, 0x10, 0xF4, 0x60, 0x02, 0xC2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, };

/* DSP Parameter (Coefficient) Data */
#define PARAMETER_SIZE 96 
#define PARAMETER_ADDR 0 
#define PARAMETER_REGSIZE 4
const uint8_t PROGMEM DSP_parameter_data[PARAMETER_SIZE] = 
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, };

// /* Register Default - IC 1.SOFT_RESET */
// 0x00, 0x00};

// /* Register Default - IC 1.SOFT_RESET */
// 0x00, 0x01};

// /* Register Default - IC 1.Reset Delay */
// 0x00, 0xFF};

// /* Register Default - IC 1.HIBERNATE */
// 0x00, 0x00};

// /* Register Default - IC 1.HIBERNATE */
// 0x00, 0x01};

// /* Register Default - IC 1.Hibernate Delay */
// 0x00, 0xFF};

// /* Register Default - IC 1.KILL_CORE */
// 0x00, 0x00};

// /* Register Default - IC 1.KILL_CORE */
// 0x00, 0x01};

// /* Register Default - IC 1.PLL_ENABLE */
// 0x00, 0x00};

// /* Register Default - IC 1.PLL_CTRL0 Register */
// 0x00, 0x60};

// /* Register Default - IC 1.PLL_CTRL1 Register */
// 0x00, 0x02};

// /* Register Default - IC 1.PLL_CLK_SRC Register */
// 0x00, 0x01};

// /* Register Default - IC 1.MCLK_OUT Register */
// 0x00, 0x05};

// /* Register Default - IC 1.PLL_ENABLE Register */
// 0x00, 0x01};

// /* Register Default - IC 1.PLL Lock Delay */
// 0x00, 0xFF};

// /* Register Default - IC 1.POWER_ENABLE0 Register */
// 0x1F, 0xFF};

// /* Register Default - IC 1.POWER_ENABLE1 Register */
// 0x00, 0x1F};

// /* Register Default - IC 1.SOUT_SOURCE0 */
// 0x00, 0x02};

// /* Register Default - IC 1.SOUT_SOURCE1 */
// 0x00, 0x02};

// /* Register Default - IC 1.SOUT_SOURCE2 */
// 0x00, 0x02};

// /* Register Default - IC 1.SOUT_SOURCE3 */
// 0x00, 0x02};

// /* Register Default - IC 1.SOUT_SOURCE4 */
// 0x00, 0x02};

// /* Register Default - IC 1.SOUT_SOURCE5 */
// 0x00, 0x02};

// /* Register Default - IC 1.SOUT_SOURCE6 */
// 0x00, 0x02};

// /* Register Default - IC 1.SOUT_SOURCE7 */
// 0x00, 0x02};

// /* Register Default - IC 1.SOUT_SOURCE8 */
// 0x00, 0x02};

// /* Register Default - IC 1.SOUT_SOURCE9 */
// 0x00, 0x02};

// /* Register Default - IC 1.SOUT_SOURCE10 */
// 0x00, 0x02};

// /* Register Default - IC 1.SOUT_SOURCE11 */
// 0x00, 0x02};

// /* Register Default - IC 1.SOUT_SOURCE12 */
// 0x00, 0x02};

// /* Register Default - IC 1.SOUT_SOURCE13 */
// 0x00, 0x02};

// /* Register Default - IC 1.SOUT_SOURCE14 */
// 0x00, 0x02};

// /* Register Default - IC 1.SOUT_SOURCE15 */
// 0x00, 0x02};

// /* Register Default - IC 1.SOUT_SOURCE16 */
// 0x00, 0x02};

// /* Register Default - IC 1.SOUT_SOURCE17 */
// 0x00, 0x02};

// /* Register Default - IC 1.SOUT_SOURCE18 */
// 0x00, 0x02};

// /* Register Default - IC 1.SOUT_SOURCE19 */
// 0x00, 0x02};

// /* Register Default - IC 1.SOUT_SOURCE20 */
// 0x00, 0x02};

// /* Register Default - IC 1.SOUT_SOURCE21 */
// 0x00, 0x02};

// /* Register Default - IC 1.SOUT_SOURCE22 */
// 0x00, 0x02};

// /* Register Default - IC 1.SOUT_SOURCE23 */
// 0x00, 0x02};

// /* Register Default - IC 1.SERIAL_BYTE_0_0 */
// 0x90, 0x00};

// /* Register Default - IC 1.SERIAL_BYTE_1_0 */
// 0x90, 0x00};

// /* Register Default - IC 1.SERIAL_BYTE_2_0 */
// 0x90, 0x00};

// /* Register Default - IC 1.SERIAL_BYTE_3_0 */
// 0x90, 0x00};

// /* Register Default - IC 1.SERIAL_BYTE_4_0 */
// 0x90, 0x00};

// /* Register Default - IC 1.SERIAL_BYTE_5_0 */
// 0x90, 0x00};

// /* Register Default - IC 1.SERIAL_BYTE_6_0 */
// 0x90, 0x00};

// /* Register Default - IC 1.SERIAL_BYTE_7_0 */
// 0x90, 0x00};

// /* Register Default - IC 1.KILL_CORE */
// 0x00, 0x00};

// /* Register Default - IC 1.START_ADDRESS */
// 0x00, 0x00};

// /* Register Default - IC 1.START_PULSE */
// 0x00, 0x02};

// /* Register Default - IC 1.START_CORE */
// 0x00, 0x00};

// /* Register Default - IC 1.START_CORE */
// 0x00, 0x01};

// /* Register Default - IC 1.Start Delay */
// 0x00, 0x01};

// /* Register Default - IC 1.HIBERNATE */
// 0x00, 0x00};



/**
 * @brief Function to load DSP firmware from the microcontroller flash memory
 * 
 * @param myDSP SigmaDSP object
 */
inline void loadProgram(SigmaDSP &myDSP)
{
  myDSP.writeRegister(CORE_REGISTER_R0_ADDR, CORE_REGISTER_R0_SIZE, DSP_core_register_R0_data);
  myDSP.writeRegisterBlock(PROGRAM_ADDR, PROGRAM_SIZE, DSP_program_data, PROGRAM_REGSIZE);
  myDSP.writeRegisterBlock(PARAMETER_ADDR, PARAMETER_SIZE, DSP_parameter_data, PARAMETER_REGSIZE);
  myDSP.writeRegister(HARDWARE_CONF_ADDR, HARDWARE_CONF_SIZE, DSP_hardware_conf_data);
  myDSP.writeRegister(CORE_REGISTER_R4_ADDR, CORE_REGISTER_R4_SIZE, DSP_core_register_R4_data);
}
#endif

